#########################
# Playbook creates:
#- SVM, interfaces and data volume on source cluster
#- Snapmirror relationship for SVM DR
#- SVM DR-ready SVM on destination
#
# (c) Alexey Mikhaylov
# NetApp Professional Services Germany
# alexey.mikhaylov@netapp.com  
#
# DEMO purpose only!
#########################

---
- hosts: localhost
  gather_facts: no
  connection: local
  vars_files:
    - "../vars.yml"
  tasks:
    - name: Set connection details dest
      ansible.builtin.set_fact:
        dest_auth:          &dest_auth
          username:         "{{ dst_cluster.username }}"
          password:         "{{ dst_cluster.password }}"
          hostname:         "{{ dst_cluster.hostname }}"
          validate_certs:   false
          use_rest:         Always
      no_log: true

    - name: Set connection details source
      ansible.builtin.set_fact:
        src_auth:           &src_auth
          username:         "{{ src_cluster.username }}"
          password:         "{{ src_cluster.password }}"
          hostname:         "{{ src_cluster.hostname }}"
          validate_certs:   false
          use_rest:         Always
      no_log: true
    
    - name: Check source SVM exists
      netapp.ontap.na_ontap_rest_info:
        <<: *src_auth
        gather_subset:
          - vserver_info
        use_python_keys: true
        parameters:
          name: "{{ src_cluster.svm }}"
        fields: 
          - 'name'
      register: svm_info
    
    - name: Delete source CIFS server
      netapp.ontap.na_ontap_cifs_server:
        <<: *src_auth
        state:   absent
        name:    "{{ src_cluster.svm }}"
        vserver: "{{ src_cluster.svm }}"
        admin_user_name: "{{ ad_user }}"
        admin_password:  "{{ ad_user_pwd }}"
        domain:          "{{ domain }}"
        name:            "{{ src_cluster.svm }}"
      when: 
        - configure_cifs == true
        - svm_info.ontap_info.svm_svms.num_records > 0

    - name: Delete dest CIFS server
      netapp.ontap.na_ontap_cifs_server:
        <<:              *dest_auth
        state:           absent
        name:            "{{ dst_cluster.svm }}"
        vserver:         "{{ dst_cluster.svm }}"
        admin_user_name: "{{ ad_user }}"
        admin_password:  "{{ ad_user_pwd }}"
        domain:          "{{ domain }}"
        name:            "{{ src_cluster.svm }}"
      when: 
        - configure_cifs == true

    - name: Stop source SVM
      netapp.ontap.na_ontap_svm:
        <<:          *src_auth
        state:       present
        admin_state: stopped
        name:        "{{ src_cluster.svm }}"

    - name: "Snapmirror quiesce + break"
      netapp.ontap.na_ontap_snapmirror:
        <<: *dest_auth
        state: present
        hostname: "{{ dst_cluster.hostname }}"
        update:   true
        source_endpoint:
          cluster: "{{ src_cluster.cluster }}"
          path:    "{{ src_cluster.svm + ':' }}"
        destination_endpoint:
          cluster: "{{ dst_cluster.cluster }}"
          path:    "{{ dst_cluster.svm + ':' }}"
        relationship_state: broken
      register: sm_break_results
      #when: 1 == 0

    - debug:
        msg: "{{ sm_break_results }}"

    - name: Delete SnapMirror relationship - SVM DR
      netapp.ontap.na_ontap_snapmirror:
        <<: *dest_auth
        state: absent
        hostname: "{{ dst_cluster.hostname }}"
        source_endpoint:
          cluster: "{{ src_cluster.cluster }}"
          path:    "{{ src_cluster.svm + ':' }}"
        destination_endpoint:
          cluster: "{{ dst_cluster.cluster }}"
          path:    "{{ dst_cluster.svm + ':' }}"
    
    - name: Remove DR protection from DR data volume (cli hack)
      netapp.ontap.na_ontap_rest_cli:
        <<: *src_auth
        command: 'volume'
        verb:    PATCH
        params:  {'volume': "{{ item }}", 'vserver': "{{ src_cluster.svm }}"}
        body:    {'vserver-dr-protection': 'unprotected'}
      with_items:
        - vol1
      register: dr_off
      ignore_errors: true

    - debug:
        msg: "{{ dr_off.msg }}"


    - name: Remove DR protection from DR data volume (ZAPI clusters enabled only)
      netapp.ontap.na_ontap_volume:
        <<: *src_auth
        state: present
        name:  vol1
        use_rest: auto
        vserver: "{{ src_cluster.svm }}"
        wait_for_completion: true
        vserver_dr_protection: unprotected
      when: 1 == 0 

    - name: Sleep to let snapmirror to disappear
      ansible.builtin.pause:
        seconds: 10
    
    - name: Remove SVM peering
      netapp.ontap.na_ontap_vserver_peer:
        <<: *dest_auth
        state: absent
        peer_vserver: "{{ src_cluster.svm }}"
        vserver: "{{ dst_cluster.svm }}"

    - name: Delete source data volume
      netapp.ontap.na_ontap_volume:
        <<: *src_auth
        state: absent
        name:  vol1
        vserver: "{{ src_cluster.svm }}"
        wait_for_completion: true
      when: svm_info.ontap_info.svm_svms.num_records > 0

    - name: Delete source SVM interface (OBSOLETE)
      netapp.ontap.na_ontap_interface:
        <<: *src_auth
        state: absent
        interface_name:    "{{ item.ifname }}"
        home_port:         "{{ item.home_port }}"
        home_node:         "{{ item.home_node }}"
        admin_status:      up
        address:           "{{ item.ip }}"
        netmask:           "{{ item.netmask }}"
        vserver:           "{{ src_cluster.svm }}"
        service_policy:    "{{ item.svc_policy }}"
      loop: "{{ src_cluster.interfaces }}"
      when: 1 == 0

    - name: Delete source SVM
      netapp.ontap.na_ontap_svm:
        <<: *src_auth
        state: absent
        name: "{{ src_cluster.svm }}"
      register: src_svm_create_result

    
    - name: Offline DR data volume
      netapp.ontap.na_ontap_volume:
        <<: *dest_auth
        state: present
        name:  vol1
        is_online: false
        vserver: "{{ dst_cluster.svm }}"
        wait_for_completion: true
      when: 1 == 0

    - name: Offline DR data volume (cli hack)
      netapp.ontap.na_ontap_rest_cli:
        <<: *dest_auth
        command: 'volume'
        verb: PATCH
        params: {'volume': "{{ item }}", 'vserver': "{{ dst_cluster.svm }}"}
        body: {'state': 'offline'}
      with_items:
        - vol1
      register: vol_offline
      ignore_errors: true

    - name: Delete DR data volume
      netapp.ontap.na_ontap_volume:
        <<: *dest_auth
        state: absent
        name:  vol1
        vserver: "{{ dst_cluster.svm }}"
        wait_for_completion: true

    - name: Delete DR SVM
      netapp.ontap.na_ontap_svm:
        <<: *dest_auth
        state: absent
        name: "{{ dst_cluster.svm }}"
      register: src_svm_create_result

...